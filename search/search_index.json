{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview CodeLab lets you write code that is compiled on the fly, and that is then immediately executed in the Paint.NET effect engine. With this you can implement almost any type of effect you want, if you have the programming and mathematical talent to do so. This plugin works by presenting you with a code editor that you can use to type in C# code that is then compiled and executed (rendered) as soon as you stop typing.","title":"Overview"},{"location":"#overview","text":"CodeLab lets you write code that is compiled on the fly, and that is then immediately executed in the Paint.NET effect engine. With this you can implement almost any type of effect you want, if you have the programming and mathematical talent to do so. This plugin works by presenting you with a code editor that you can use to type in C# code that is then compiled and executed (rendered) as soon as you stop typing.","title":"Overview"},{"location":"autocomplete-box/","text":"AutoComplete Box The AutoComplete Box displays Object Types, static instances members, constructors, keywords, and snippets. Filtering String Filtering As you continue to type while the AutoComplete Box is open, the list of items will filter to only match the characters you ve typed. Tip You can also filter using Initials. ex: Typing isc will match I nt S lider C ontrol` Object Filtering If you only want to show a specific object type, you can use one of these hotkeys to invoke filtering: Alt + L Only show Local Variables Parameters Alt + O Only show Constants Alt + P Only show Properties Alt + F Only show Fields Alt + M Only show Methods Alt + C Only show Classes Alt + S Only show Structs Alt + E Only show Enums Alt + K Only show Keywords Alt + T Only show Snippets Alt + I Only show Interfaces Info Only one Object Filter can be used at a time.","title":"AutoComplete Box"},{"location":"autocomplete-box/#autocomplete-box","text":"The AutoComplete Box displays Object Types, static instances members, constructors, keywords, and snippets.","title":"AutoComplete Box"},{"location":"autocomplete-box/#filtering","text":"","title":"Filtering"},{"location":"autocomplete-box/#string-filtering","text":"As you continue to type while the AutoComplete Box is open, the list of items will filter to only match the characters you ve typed. Tip You can also filter using Initials. ex: Typing isc will match I nt S lider C ontrol`","title":"String Filtering"},{"location":"autocomplete-box/#object-filtering","text":"If you only want to show a specific object type, you can use one of these hotkeys to invoke filtering: Alt + L Only show Local Variables Parameters Alt + O Only show Constants Alt + P Only show Properties Alt + F Only show Fields Alt + M Only show Methods Alt + C Only show Classes Alt + S Only show Structs Alt + E Only show Enums Alt + K Only show Keywords Alt + T Only show Snippets Alt + I Only show Interfaces Info Only one Object Filter can be used at a time.","title":"Object Filtering"},{"location":"builder/","text":"DLL Builder TODO Fields TODO Menu Settings TODO Name, submenu, author, ect. Support Information TODO Forced Settings TODO Help Content TODO Help content can be one of these four types: None. If no help text is entered, no ? button will be added to your effect. Plain text (including tabs and returns). This will be displayed in a modal message box. URL. If your help text is a URL, it will be opened in a non-modal browser window. Rich Formatted Text. This will be displayed in a modal pop up form with a rich text format control. All RTF features are supported including pictures. All URLs included are automatically clickable and open in a new browser window. View Source TODO Generate VS Solution TODO Build TODO Cancel TODO Supplemental Files TODO EffectName.png 16x16 Effect Icon EffectName.example.png 200x150 image to display in the Plugin Browser EffectName.rtf Help content in the Rich Text File format","title":"DLL Builder"},{"location":"builder/#dll-builder","text":"TODO","title":"DLL Builder"},{"location":"builder/#fields","text":"TODO","title":"Fields"},{"location":"builder/#menu-settings","text":"TODO Name, submenu, author, ect.","title":"Menu Settings"},{"location":"builder/#support-information","text":"TODO","title":"Support Information"},{"location":"builder/#forced-settings","text":"TODO","title":"Forced Settings"},{"location":"builder/#help-content","text":"TODO Help content can be one of these four types: None. If no help text is entered, no ? button will be added to your effect. Plain text (including tabs and returns). This will be displayed in a modal message box. URL. If your help text is a URL, it will be opened in a non-modal browser window. Rich Formatted Text. This will be displayed in a modal pop up form with a rich text format control. All RTF features are supported including pictures. All URLs included are automatically clickable and open in a new browser window.","title":"Help Content"},{"location":"builder/#view-source","text":"TODO","title":"View Source"},{"location":"builder/#generate-vs-solution","text":"TODO","title":"Generate VS Solution"},{"location":"builder/#build","text":"TODO","title":"Build"},{"location":"builder/#cancel","text":"TODO","title":"Cancel"},{"location":"builder/#supplemental-files","text":"TODO EffectName.png 16x16 Effect Icon EffectName.example.png 200x150 image to display in the Plugin Browser EffectName.rtf Help content in the Rich Text File format","title":"Supplemental Files"},{"location":"debug-output/","text":"Debug Output The Debug Output pane displays debug messages from your code. This can be useful for evaluating variable values, among other things. Example Debug . WriteLine ( My Debug Message! ); Example Debug . WriteLine ( myVariable ); Debug Mode When the Debug Output pane is opened, the compiler is automatically set to Debug mode. Info This doesn t affect Build DLL or Preview Effect ; they always use Release mode. Likewise, when the Debug Output pane is closed, the compiler is automatically set to Release mode. Example #if DEBUG // This code only runs when compiling in Debug mode DoSomething (); #endif","title":"Debug Output"},{"location":"debug-output/#debug-output","text":"The Debug Output pane displays debug messages from your code. This can be useful for evaluating variable values, among other things. Example Debug . WriteLine ( My Debug Message! ); Example Debug . WriteLine ( myVariable );","title":"Debug Output"},{"location":"debug-output/#debug-mode","text":"When the Debug Output pane is opened, the compiler is automatically set to Debug mode. Info This doesn t affect Build DLL or Preview Effect ; they always use Release mode. Likewise, when the Debug Output pane is closed, the compiler is automatically set to Release mode. Example #if DEBUG // This code only runs when compiling in Debug mode DoSomething (); #endif","title":"Debug Mode"},{"location":"editor/","text":"Editor Margins Line Numbers When enabled, displays the index number of each document line. If word wrap is also enabled, the index number will span a taller area for wrapped lines. Line Numbers can be enabled/disabled in the View menu. Bookmarks When enabled, displays a clickable margin for marking document lines. Useful when working on very long document, and you need to scroll back to a specific line(s). Bookmarks can be enabled/disabled in the View menu. Code Folding When enabled, displays + and - symbols to expand/collapse code blocks. Code Folding can be enabled/disabled in the View menu. Find Replace A panel to perform finding and replacing operations. See the Find Replace page for details. Indicators Errors Code errors are underlined with red squiggles. Matches from Find Find matches are highlighted in orange. Object Highlight Highlights all usages of the object under the text caret. Indicator Map This replaces the standard vertical scrollbar. It displays the indicator marks for the entire document. The Indicator Map can be enabled/disabled in the View menu, or with Ctrl + M . Go To Definition Pressing the F12 key goes to the definition of the object under the text caret. If it is a Type defined in the .NET Framework, the associated page on docs.microsoft.com is open. If it defined in the current document (for example a variable), the text caret is scrolled to that position. Rename Variable When renaming an existing variable, a dotted box will appear around the variable, and will provide access to the light bulb menu. The light bulb menu has an option to rename all instances of that variable. Tooltips Display information of the Object at the location of the mouse cursor, such as: Type, Return type, Member type, namespace, ect. If there is an error at the location of the mouse cursor, then the error message is displayed instead.","title":"Editor"},{"location":"editor/#editor","text":"","title":"Editor"},{"location":"editor/#margins","text":"","title":"Margins"},{"location":"editor/#line-numbers","text":"When enabled, displays the index number of each document line. If word wrap is also enabled, the index number will span a taller area for wrapped lines. Line Numbers can be enabled/disabled in the View menu.","title":"Line Numbers"},{"location":"editor/#bookmarks","text":"When enabled, displays a clickable margin for marking document lines. Useful when working on very long document, and you need to scroll back to a specific line(s). Bookmarks can be enabled/disabled in the View menu.","title":"Bookmarks"},{"location":"editor/#code-folding","text":"When enabled, displays + and - symbols to expand/collapse code blocks. Code Folding can be enabled/disabled in the View menu.","title":"Code Folding"},{"location":"editor/#find-replace","text":"A panel to perform finding and replacing operations. See the Find Replace page for details.","title":"Find &amp; Replace"},{"location":"editor/#indicators","text":"","title":"Indicators"},{"location":"editor/#errors","text":"Code errors are underlined with red squiggles.","title":"Errors"},{"location":"editor/#matches-from-find","text":"Find matches are highlighted in orange.","title":"Matches from Find"},{"location":"editor/#object-highlight","text":"Highlights all usages of the object under the text caret.","title":"Object Highlight"},{"location":"editor/#indicator-map","text":"This replaces the standard vertical scrollbar. It displays the indicator marks for the entire document. The Indicator Map can be enabled/disabled in the View menu, or with Ctrl + M .","title":"Indicator Map"},{"location":"editor/#go-to-definition","text":"Pressing the F12 key goes to the definition of the object under the text caret. If it is a Type defined in the .NET Framework, the associated page on docs.microsoft.com is open. If it defined in the current document (for example a variable), the text caret is scrolled to that position.","title":"Go To Definition"},{"location":"editor/#rename-variable","text":"When renaming an existing variable, a dotted box will appear around the variable, and will provide access to the light bulb menu. The light bulb menu has an option to rename all instances of that variable.","title":"Rename Variable"},{"location":"editor/#tooltips","text":"Display information of the Object at the location of the mouse cursor, such as: Type, Return type, Member type, namespace, ect. If there is an error at the location of the mouse cursor, then the error message is displayed instead.","title":"Tooltips"},{"location":"error-list/","text":"Error List This pane will display a list of any errors in your C# code. Click on the individual errors to jump to the portion of the code that caused the error. Due to errors in your code (like mismatched braces) the error may be flagged outside of your code. Please check the structure of your script to correct those types of errors. Info Errors are also indicated in the editor with red squiggle underlines. Context Menu Copy Error Message Copies the error message (excluding the error number and the line number) to the clipboard. Read Full Error Opens a dialog box containing the full error for easier reading. Lookup Error Code Opens the online documentation for the specific error code.","title":"Error List"},{"location":"error-list/#error-list","text":"This pane will display a list of any errors in your C# code. Click on the individual errors to jump to the portion of the code that caused the error. Due to errors in your code (like mismatched braces) the error may be flagged outside of your code. Please check the structure of your script to correct those types of errors. Info Errors are also indicated in the editor with red squiggle underlines.","title":"Error List"},{"location":"error-list/#context-menu","text":"","title":"Context Menu"},{"location":"error-list/#copy-error-message","text":"Copies the error message (excluding the error number and the line number) to the clipboard.","title":"Copy Error Message"},{"location":"error-list/#read-full-error","text":"Opens a dialog box containing the full error for easier reading.","title":"Read Full Error"},{"location":"error-list/#lookup-error-code","text":"Opens the online documentation for the specific error code.","title":"Lookup Error Code"},{"location":"find-and-replace/","text":"Find Replace The Find Replace panel allow you to search the code document, and highlight all instances that match the search string. Find Options Match Casing To qualify as a match, every character of the string must have the same casing of search string. Example myWord would match myWord , but not MyWord . Whole Word Example Selection would match selection , but not GetSelection . Regular Expressions Example Amount\\d would match Amount1 and Amount2 . Interpret Escape Characters Example \\r\\n would allow your search to span to the next line. Replace This is the string you wish to use as a replacement of your search query. Replace All Pressing this button will replace all instances of your search query with your replacement string.","title":"Find & Replace"},{"location":"find-and-replace/#find-replace","text":"The Find Replace panel allow you to search the code document, and highlight all instances that match the search string.","title":"Find &amp; Replace"},{"location":"find-and-replace/#find-options","text":"","title":"Find Options"},{"location":"find-and-replace/#match-casing","text":"To qualify as a match, every character of the string must have the same casing of search string. Example myWord would match myWord , but not MyWord .","title":"Match Casing"},{"location":"find-and-replace/#whole-word","text":"Example Selection would match selection , but not GetSelection .","title":"Whole Word"},{"location":"find-and-replace/#regular-expressions","text":"Example Amount\\d would match Amount1 and Amount2 .","title":"Regular Expressions"},{"location":"find-and-replace/#interpret-escape-characters","text":"Example \\r\\n would allow your search to span to the next line.","title":"Interpret Escape Characters"},{"location":"find-and-replace/#replace","text":"This is the string you wish to use as a replacement of your search query.","title":"Replace"},{"location":"find-and-replace/#replace-all","text":"Pressing this button will replace all instances of your search query with your replacement string.","title":"Replace All"},{"location":"keyboard-shortcuts/","text":"Keyboard Shortcuts This the master list of all the keyboard shortcuts in CodeLab. Editor Ctrl + A Select All Ctrl + B Build DLL Ctrl + C Copy Selection Ctrl + D Show/Hide Debug Output Ctrl + E Show/Hide Errors List Ctrl + F Find Ctrl + G Ctrl + H Replace Ctrl + I User Interface Designer Ctrl + J Show Autocomplete box Ctrl + K Comment Selection Ctrl + L Toggle Large Font Ctrl + M Show/Hide Indicator Map Ctrl + N New code document Ctrl + O Open code document Ctrl + P Preview Effect Ctrl + Q Format Document Ctrl + R Ctrl + S Save code document Ctrl + T Show/Hide Toolbar Ctrl + U Uncomment Selection Ctrl + V Paste Ctrl + W Close document tab Ctrl + X Cut Selection Ctrl + Y Redo Ctrl + Z Undo Tab Indent Shift + Tab Unindent Ctrl + Tab Switch to tab on the right Ctrl + Shift + Tab Switch to tab on the left F12 Go to Definition AutoComplete Box Tab Autocomplete (Forced autocomplete; even when there are no appropriate matches) Esc Closes the AutoComplete Box without actually doing any autocompletion. Alt + L Only show Local Variables Parameters Alt + O Only show Constants Alt + P Only show Properties Alt + F Only show Fields Alt + M Only show Methods Alt + C Only show Classes Alt + S Only show Structs Alt + E Only show Enums Alt + K Only show Keywords Alt + T Only show Snippets Alt + I Only show Interfaces Misc F1 Open the Codelab help site","title":"Keyboard Shortcuts"},{"location":"keyboard-shortcuts/#keyboard-shortcuts","text":"This the master list of all the keyboard shortcuts in CodeLab.","title":"Keyboard Shortcuts"},{"location":"keyboard-shortcuts/#editor","text":"Ctrl + A Select All Ctrl + B Build DLL Ctrl + C Copy Selection Ctrl + D Show/Hide Debug Output Ctrl + E Show/Hide Errors List Ctrl + F Find Ctrl + G Ctrl + H Replace Ctrl + I User Interface Designer Ctrl + J Show Autocomplete box Ctrl + K Comment Selection Ctrl + L Toggle Large Font Ctrl + M Show/Hide Indicator Map Ctrl + N New code document Ctrl + O Open code document Ctrl + P Preview Effect Ctrl + Q Format Document Ctrl + R Ctrl + S Save code document Ctrl + T Show/Hide Toolbar Ctrl + U Uncomment Selection Ctrl + V Paste Ctrl + W Close document tab Ctrl + X Cut Selection Ctrl + Y Redo Ctrl + Z Undo Tab Indent Shift + Tab Unindent Ctrl + Tab Switch to tab on the right Ctrl + Shift + Tab Switch to tab on the left F12 Go to Definition","title":"Editor"},{"location":"keyboard-shortcuts/#autocomplete-box","text":"Tab Autocomplete (Forced autocomplete; even when there are no appropriate matches) Esc Closes the AutoComplete Box without actually doing any autocompletion. Alt + L Only show Local Variables Parameters Alt + O Only show Constants Alt + P Only show Properties Alt + F Only show Fields Alt + M Only show Methods Alt + C Only show Classes Alt + S Only show Structs Alt + E Only show Enums Alt + K Only show Keywords Alt + T Only show Snippets Alt + I Only show Interfaces","title":"AutoComplete Box"},{"location":"keyboard-shortcuts/#misc","text":"F1 Open the Codelab help site","title":"Misc"},{"location":"main-window/","text":"Main Window Menus See the Menus page for details. Toolbar See the Toolbar page for details. Tab Bar See the Tab Bar page for details. Editor See the Editor page for details. Error List See the Error List page for details. Debug Output See the Debug Output page for details. Build Button The build button can be used to compile your current script and run the effect on your current selection. When you pause typing in the code editor for a few seconds, CodeLab will automatically run this Build process for you. If build errors occur, they will be listed in the Error List pane. OK Button When you are happy with your effect, press the OK button to finalize the effect to your current selection. Cancel Button If you do not like your effect, press the Cancel button to close the CodeLab editor window WITHOUT applying any changes to your original image. Warning Canceling CodeLab will discard the contents of all tabs. Be sure to save any changes beforehand.","title":"Main Window"},{"location":"main-window/#main-window","text":"","title":"Main Window"},{"location":"main-window/#menus","text":"See the Menus page for details.","title":"Menus"},{"location":"main-window/#toolbar","text":"See the Toolbar page for details.","title":"Toolbar"},{"location":"main-window/#tab-bar","text":"See the Tab Bar page for details.","title":"Tab Bar"},{"location":"main-window/#editor","text":"See the Editor page for details.","title":"Editor"},{"location":"main-window/#error-list","text":"See the Error List page for details.","title":"Error List"},{"location":"main-window/#debug-output","text":"See the Debug Output page for details.","title":"Debug Output"},{"location":"main-window/#build-button","text":"The build button can be used to compile your current script and run the effect on your current selection. When you pause typing in the code editor for a few seconds, CodeLab will automatically run this Build process for you. If build errors occur, they will be listed in the Error List pane.","title":"Build Button"},{"location":"main-window/#ok-button","text":"When you are happy with your effect, press the OK button to finalize the effect to your current selection.","title":"OK Button"},{"location":"main-window/#cancel-button","text":"If you do not like your effect, press the Cancel button to close the CodeLab editor window WITHOUT applying any changes to your original image. Warning Canceling CodeLab will discard the contents of all tabs. Be sure to save any changes beforehand.","title":"Cancel Button"},{"location":"menus/","text":"Menus File New (Ctrl + N) Opens the New Document dialog, which allows for to configurable templates. Open (Ctrl + O) Display a dialog to choose a .cs file to load into CodeLab. Open Recent This will open a submenu containing the eight most recently opened .cs files. Save (Ctrl + S) This will save changes to an opened .cs file. Save As (Ctrl + Shift + S) This will open the standard Windows Save As dialog box. When you pick a name and click OK, CodeLab will save your current script to that file. It is important that your filename uses alphanumeric characters only (no spaces or other special symbols) as this name will be used for your effect s internal namespace when building a DLL of your effect. Saving a file updates the filename shown in the CodeLab title bar. This is important because when you build a DLL file, this is the name that the DLL file will have. Build DLL (Ctrl + B) Use this option when you are happy with your effect and want to make it a permanent part of your Paint.NET (or you want to share your effect with your friends). Be sure to save your script file ( Ctrl + S ) before saving as a DLL. See this page for more details on creating DLL files for use with Paint.NET. User Interface Designer (Ctrl + I) Use this option before you start editing your Render function to design the user interface controls your effect will have. See this page for more details on using CodeLab s UI designer. Preview Effect (Ctrl + P) Allows you to run your Effect with a fully functional UI, directly from within CodeLab, without building a dll file and installing it. Exit This will close the editor without building a DLL or even applying your effect to the current selection. Edit Undo (Ctrl + Z) Steps backwards in the edit history of the document. Redo (Ctrl + Y) Steps forwards in the edit history of the document. Select All (Ctrl + A) This command selects your entire script within the code window. From there, you can Find (Ctrl + F) Open the Find Replace panel. Replace (Ctrl + H) Open the Find Replace panel in expanded form. Cut (Ctrl + X) This command deletes the currently selected code in the editor window and places a copy of the deleted code onto the clipboard. Copy (Ctrl + C) This command places a copy of the currently selected code in the editor window onto the clipboard. The currently selected code is NOT deleted. Paste (Ctrl + V) This command replaces the current selection with the code from the clipboard. Indent (Tab) If you have lines of code selected in the editor window, pressing the tab key will indent those lines by four spaces. If only a partial line is selected, after pressing the tab key, the entire line will become selected. Unindent (Shift + Tab) If you have lines of code selected in the editor window, pressing the shift-tab key will unindent those lines by four spaces. If only a partial line is selected, after pressing the shift-tab key, the entire line will become selected. Comment Selection (Ctrl + K) Prepends the selected lines with // to transform it into comment. Useful when wanting to temporarily disable part of your code. Uncomment Selection (Ctrl + U) Removes any prepended // from the selected lines. Format Document (Ctrl + Q) Automatically indents code, and trims whitespace from line ends. View Toolbar (Ctrl + T) This toggles the visibility of the toolbar. Errors List (Ctrl + E) This will toggle the visibility of the errors list. Debug Output (Ctrl + D) This toggles the visibility of the debug output. Note Having the debug output visible will also put the compiler into Debug mode. Line Numbers This toggles the Line Numbers margin in the editor. Bookmarks This toggles the Bookmarks margin in the editor. Code Folding This toggles the Code Folding margin in the editor. Large Font (Ctrl + L) If you have trouble seeing the code in the code window because it is too small, large font mode will increase the size of the text in the code editor window to 125% of normal size. Select the option again to return the code to normal size. Indicator Map (Ctrl + M) This toggles the Indicator Map in the editor. Word Wrap This toggles Word Wrap in the editor. Show Whitespace This toggles the visibility of the whitespace indicators in the editor. Font These changes the Font used in the editor and the Debug Output. Consolas New Courier Envy Code R Hack Verdana Transparency By default, the CodeLab window is not transparent at all. If you would like to be able to see through the code window to observe the effect your script is having on the current selection, use this option to modify CodeLab s transparency level. You may select 50% (nearly transparent), 25%, 10% (barely transparent), and 0% (not transparent). Theme There are three options for theme: Auto Light Dark Auto is not an actual theme, but rather will automatically select Light or Dark based on your chosen Color Scheme in paint.net . Help Help Topics (F1) This command will open a web browser and take you to the CodeLab Help page. Check for updates This command will open a web browser and take you to the CodeLab page. Changes on this version Open an online changelog. About This command shows the About box which includes the version number and copyright message for CodeLab.","title":"Menus"},{"location":"menus/#menus","text":"","title":"Menus"},{"location":"menus/#file","text":"","title":"File"},{"location":"menus/#new-ctrl-n","text":"Opens the New Document dialog, which allows for to configurable templates.","title":"New (Ctrl + N)"},{"location":"menus/#open-ctrl-o","text":"Display a dialog to choose a .cs file to load into CodeLab.","title":"Open... (Ctrl + O)"},{"location":"menus/#open-recent","text":"This will open a submenu containing the eight most recently opened .cs files.","title":"Open Recent"},{"location":"menus/#save-ctrl-s","text":"This will save changes to an opened .cs file.","title":"Save (Ctrl + S)"},{"location":"menus/#save-as-ctrl-shift-s","text":"This will open the standard Windows Save As dialog box. When you pick a name and click OK, CodeLab will save your current script to that file. It is important that your filename uses alphanumeric characters only (no spaces or other special symbols) as this name will be used for your effect s internal namespace when building a DLL of your effect. Saving a file updates the filename shown in the CodeLab title bar. This is important because when you build a DLL file, this is the name that the DLL file will have.","title":"Save As... (Ctrl + Shift + S)"},{"location":"menus/#build-dll-ctrl-b","text":"Use this option when you are happy with your effect and want to make it a permanent part of your Paint.NET (or you want to share your effect with your friends). Be sure to save your script file ( Ctrl + S ) before saving as a DLL. See this page for more details on creating DLL files for use with Paint.NET.","title":"Build DLL... (Ctrl + B)"},{"location":"menus/#user-interface-designer-ctrl-i","text":"Use this option before you start editing your Render function to design the user interface controls your effect will have. See this page for more details on using CodeLab s UI designer.","title":"User Interface Designer (Ctrl + I)"},{"location":"menus/#preview-effect-ctrl-p","text":"Allows you to run your Effect with a fully functional UI, directly from within CodeLab, without building a dll file and installing it.","title":"Preview Effect (Ctrl + P)"},{"location":"menus/#exit","text":"This will close the editor without building a DLL or even applying your effect to the current selection.","title":"Exit"},{"location":"menus/#edit","text":"","title":"Edit"},{"location":"menus/#undo-ctrl-z","text":"Steps backwards in the edit history of the document.","title":"Undo (Ctrl + Z)"},{"location":"menus/#redo-ctrl-y","text":"Steps forwards in the edit history of the document.","title":"Redo (Ctrl + Y)"},{"location":"menus/#select-all-ctrl-a","text":"This command selects your entire script within the code window. From there, you can","title":"Select All (Ctrl + A)"},{"location":"menus/#find-ctrl-f","text":"Open the Find Replace panel.","title":"Find (Ctrl + F)"},{"location":"menus/#replace-ctrl-h","text":"Open the Find Replace panel in expanded form.","title":"Replace (Ctrl + H)"},{"location":"menus/#cut-ctrl-x","text":"This command deletes the currently selected code in the editor window and places a copy of the deleted code onto the clipboard.","title":"Cut (Ctrl + X)"},{"location":"menus/#copy-ctrl-c","text":"This command places a copy of the currently selected code in the editor window onto the clipboard. The currently selected code is NOT deleted.","title":"Copy (Ctrl + C)"},{"location":"menus/#paste-ctrl-v","text":"This command replaces the current selection with the code from the clipboard.","title":"Paste (Ctrl + V)"},{"location":"menus/#indent-tab","text":"If you have lines of code selected in the editor window, pressing the tab key will indent those lines by four spaces. If only a partial line is selected, after pressing the tab key, the entire line will become selected.","title":"Indent (Tab)"},{"location":"menus/#unindent-shift-tab","text":"If you have lines of code selected in the editor window, pressing the shift-tab key will unindent those lines by four spaces. If only a partial line is selected, after pressing the shift-tab key, the entire line will become selected.","title":"Unindent (Shift + Tab)"},{"location":"menus/#comment-selection-ctrl-k","text":"Prepends the selected lines with // to transform it into comment. Useful when wanting to temporarily disable part of your code.","title":"Comment Selection (Ctrl + K)"},{"location":"menus/#uncomment-selection-ctrl-u","text":"Removes any prepended // from the selected lines.","title":"Uncomment Selection (Ctrl + U)"},{"location":"menus/#format-document-ctrl-q","text":"Automatically indents code, and trims whitespace from line ends.","title":"Format Document (Ctrl + Q)"},{"location":"menus/#view","text":"","title":"View"},{"location":"menus/#toolbar-ctrl-t","text":"This toggles the visibility of the toolbar.","title":"Toolbar (Ctrl + T)"},{"location":"menus/#errors-list-ctrl-e","text":"This will toggle the visibility of the errors list.","title":"Errors List (Ctrl + E)"},{"location":"menus/#debug-output-ctrl-d","text":"This toggles the visibility of the debug output. Note Having the debug output visible will also put the compiler into Debug mode.","title":"Debug Output (Ctrl + D)"},{"location":"menus/#line-numbers","text":"This toggles the Line Numbers margin in the editor.","title":"Line Numbers"},{"location":"menus/#bookmarks","text":"This toggles the Bookmarks margin in the editor.","title":"Bookmarks"},{"location":"menus/#code-folding","text":"This toggles the Code Folding margin in the editor.","title":"Code Folding"},{"location":"menus/#large-font-ctrl-l","text":"If you have trouble seeing the code in the code window because it is too small, large font mode will increase the size of the text in the code editor window to 125% of normal size. Select the option again to return the code to normal size.","title":"Large Font (Ctrl + L)"},{"location":"menus/#indicator-map-ctrl-m","text":"This toggles the Indicator Map in the editor.","title":"Indicator Map (Ctrl + M)"},{"location":"menus/#word-wrap","text":"This toggles Word Wrap in the editor.","title":"Word Wrap"},{"location":"menus/#show-whitespace","text":"This toggles the visibility of the whitespace indicators in the editor.","title":"Show Whitespace"},{"location":"menus/#font","text":"These changes the Font used in the editor and the Debug Output. Consolas New Courier Envy Code R Hack Verdana","title":"Font"},{"location":"menus/#transparency","text":"By default, the CodeLab window is not transparent at all. If you would like to be able to see through the code window to observe the effect your script is having on the current selection, use this option to modify CodeLab s transparency level. You may select 50% (nearly transparent), 25%, 10% (barely transparent), and 0% (not transparent).","title":"Transparency"},{"location":"menus/#theme","text":"There are three options for theme: Auto Light Dark Auto is not an actual theme, but rather will automatically select Light or Dark based on your chosen Color Scheme in paint.net .","title":"Theme"},{"location":"menus/#help","text":"","title":"Help"},{"location":"menus/#help-topics-f1","text":"This command will open a web browser and take you to the CodeLab Help page.","title":"Help Topics (F1)"},{"location":"menus/#check-for-updates","text":"This command will open a web browser and take you to the CodeLab page.","title":"Check for updates"},{"location":"menus/#changes-on-this-version","text":"Open an online changelog.","title":"Changes on this version..."},{"location":"menus/#about","text":"This command shows the About box which includes the version number and copyright message for CodeLab.","title":"About..."},{"location":"new-doc/","text":"New Document This allows you to create a new code document by configuring templates. TODO Loop Style TODO Basic Advanced (unsafe pointers) None (GDI+) Variables TODO Pixel Flow for complex effects TODO Additional Settings TODO","title":"New Document"},{"location":"new-doc/#new-document","text":"This allows you to create a new code document by configuring templates. TODO","title":"New Document"},{"location":"new-doc/#loop-style","text":"TODO Basic Advanced (unsafe pointers) None (GDI+)","title":"Loop Style"},{"location":"new-doc/#variables","text":"TODO","title":"Variables"},{"location":"new-doc/#pixel-flow-for-complex-effects","text":"TODO","title":"Pixel Flow for complex effects"},{"location":"new-doc/#additional-settings","text":"TODO","title":"Additional Settings"},{"location":"tab-bar/","text":"Tab Bar The Tab Bar allows CodeLab to quickly switch between multiple open scripts. Tab Overview Each tab will display an icon and a title. If an icon (PNG format) exists for the .cs file, it will be displayed. Otherwise, a generic icon is displayed. If the file has unsaved changes, an asterisk ( * ) is display to the right of the title. Closing Tabs Tabs may be closed in any of these three ways: Ctrl + W Mouse middle click Click red X","title":"Tab Bar"},{"location":"tab-bar/#tab-bar","text":"The Tab Bar allows CodeLab to quickly switch between multiple open scripts.","title":"Tab Bar"},{"location":"tab-bar/#tab-overview","text":"Each tab will display an icon and a title. If an icon (PNG format) exists for the .cs file, it will be displayed. Otherwise, a generic icon is displayed. If the file has unsaved changes, an asterisk ( * ) is display to the right of the title.","title":"Tab Overview"},{"location":"tab-bar/#closing-tabs","text":"Tabs may be closed in any of these three ways: Ctrl + W Mouse middle click Click red X","title":"Closing Tabs"},{"location":"toolbar/","text":"Toolbar New (Ctrl + N) Opens the New Document dialog, which allows for to configurable templates. Open (Ctrl + O) Display a dialog to choose a .cs file to load into CodeLab. Save (Ctrl + S) Saves the changes to the opened .cs file. Build DLL (Ctrl + B) Use this option when you are happy with your effect and want to make it a permanent part of your Paint.NET (or you want to share your effect with your friends). Be sure to save your script file ( Ctrl + S ) before saving as a DLL. See this page for more details on creating DLL files for use with Paint.NET. User Interface Designer (Ctrl + I) Use this option before you start editing your Render function to design the user interface controls your effect will have. See this page for more details on using CodeLab s UI designer. Preview Effect (Ctrl + P) Displays the effect with it s generated UI, and temporarily renders the effect to the Paint.net canvas. Select All (Ctrl + A) Highlights all the text in the code editor. Cut (Ctrl + X) This command deletes the currently selected code in the editor window and places a copy of the deleted code onto the clipboard. Copy (Ctrl + C) This command places a copy of the currently selected code in the editor window onto the clipboard. The currently selected code is NOT deleted. Paste (Ctrl + V) This command replaces the current selection with the code from the clipboard. Undo (Ctrl + Z) Steps backwards in the edit history of the document. Redo (Ctrl + Y) Steps forwards in the edit history of the document. Indent (Tab) If you have lines of code selected in the editor window, pressing the tab key will indent those lines by four spaces. If only a partial line is selected, after pressing the tab key, the entire line will become selected. Unindent (Shift + Tab) If you have lines of code selected in the editor window, pressing the shift-tab key will unindent those lines by four spaces. If only a partial line is selected, after pressing the shift-tab key, the entire line will become selected. Comment Selection (Ctrl + K) Prepends the selected lines with // to transform it into comment. Useful when wanting to temporarily disable part of your code. Uncomment Selection (Ctrl + U) Removes any prepended // from the selected lines. Find (Ctrl + F) Open the Find Replace panel. Replace (Ctrl + H) Open the Find Replace panel in expanded form.","title":"Toolbar"},{"location":"toolbar/#toolbar","text":"","title":"Toolbar"},{"location":"toolbar/#new-ctrl-n","text":"Opens the New Document dialog, which allows for to configurable templates.","title":"New (Ctrl + N)"},{"location":"toolbar/#open-ctrl-o","text":"Display a dialog to choose a .cs file to load into CodeLab.","title":"Open (Ctrl + O)"},{"location":"toolbar/#save-ctrl-s","text":"Saves the changes to the opened .cs file.","title":"Save (Ctrl + S)"},{"location":"toolbar/#build-dll-ctrl-b","text":"Use this option when you are happy with your effect and want to make it a permanent part of your Paint.NET (or you want to share your effect with your friends). Be sure to save your script file ( Ctrl + S ) before saving as a DLL. See this page for more details on creating DLL files for use with Paint.NET.","title":"Build DLL (Ctrl + B)"},{"location":"toolbar/#user-interface-designer-ctrl-i","text":"Use this option before you start editing your Render function to design the user interface controls your effect will have. See this page for more details on using CodeLab s UI designer.","title":"User Interface Designer (Ctrl + I)"},{"location":"toolbar/#preview-effect-ctrl-p","text":"Displays the effect with it s generated UI, and temporarily renders the effect to the Paint.net canvas.","title":"Preview Effect (Ctrl + P)"},{"location":"toolbar/#select-all-ctrl-a","text":"Highlights all the text in the code editor.","title":"Select All (Ctrl + A)"},{"location":"toolbar/#cut-ctrl-x","text":"This command deletes the currently selected code in the editor window and places a copy of the deleted code onto the clipboard.","title":"Cut (Ctrl + X)"},{"location":"toolbar/#copy-ctrl-c","text":"This command places a copy of the currently selected code in the editor window onto the clipboard. The currently selected code is NOT deleted.","title":"Copy (Ctrl + C)"},{"location":"toolbar/#paste-ctrl-v","text":"This command replaces the current selection with the code from the clipboard.","title":"Paste (Ctrl + V)"},{"location":"toolbar/#undo-ctrl-z","text":"Steps backwards in the edit history of the document.","title":"Undo (Ctrl + Z)"},{"location":"toolbar/#redo-ctrl-y","text":"Steps forwards in the edit history of the document.","title":"Redo (Ctrl + Y)"},{"location":"toolbar/#indent-tab","text":"If you have lines of code selected in the editor window, pressing the tab key will indent those lines by four spaces. If only a partial line is selected, after pressing the tab key, the entire line will become selected.","title":"Indent (Tab)"},{"location":"toolbar/#unindent-shift-tab","text":"If you have lines of code selected in the editor window, pressing the shift-tab key will unindent those lines by four spaces. If only a partial line is selected, after pressing the shift-tab key, the entire line will become selected.","title":"Unindent (Shift + Tab)"},{"location":"toolbar/#comment-selection-ctrl-k","text":"Prepends the selected lines with // to transform it into comment. Useful when wanting to temporarily disable part of your code.","title":"Comment Selection (Ctrl + K)"},{"location":"toolbar/#uncomment-selection-ctrl-u","text":"Removes any prepended // from the selected lines.","title":"Uncomment Selection (Ctrl + U)"},{"location":"toolbar/#find-ctrl-f","text":"Open the Find Replace panel.","title":"Find (Ctrl + F)"},{"location":"toolbar/#replace-ctrl-h","text":"Open the Find Replace panel in expanded form.","title":"Replace (Ctrl + H)"},{"location":"ui-designer/","text":"User Interface Designer When CodeLab starts, it loads a default script that contains a Render function and a UICode block that defines the type of interface your effect will have. The default UICode block looks like this: #region UICode IntSliderControl Amount1 = 0 ; // [0,100] Slider 1 Description IntSliderControl Amount2 = 0 ; // [0,100] Slider 2 Description IntSliderControl Amount3 = 0 ; // [0,100] Slider 3 Description #endregion The UICode block starts with the #region UICode line, ends with the #endregion line, and contains one line for each control you wish to include in your effect UI. Each of those interior lines defines a variable for use in your render loop and describes to CodeLab how you want the control to look. You may include as many or as few lines as you wish. The default script contains definitions for 3 integer sliders that have a default value of 0 and a range of 0 to 100. Preview This displays a preview of the of built dialog window.","title":"User Interface Designer"},{"location":"ui-designer/#user-interface-designer","text":"When CodeLab starts, it loads a default script that contains a Render function and a UICode block that defines the type of interface your effect will have. The default UICode block looks like this: #region UICode IntSliderControl Amount1 = 0 ; // [0,100] Slider 1 Description IntSliderControl Amount2 = 0 ; // [0,100] Slider 2 Description IntSliderControl Amount3 = 0 ; // [0,100] Slider 3 Description #endregion The UICode block starts with the #region UICode line, ends with the #endregion line, and contains one line for each control you wish to include in your effect UI. Each of those interior lines defines a variable for use in your render loop and describes to CodeLab how you want the control to look. You may include as many or as few lines as you wish. The default script contains definitions for 3 integer sliders that have a default value of 0 and a range of 0 to 100.","title":"User Interface Designer"},{"location":"ui-designer/#preview","text":"This displays a preview of the of built dialog window.","title":"Preview"}]}